To complete the task of inoculating a flask of Luria-Bertani (LB) broth with E.coli and growing the cells overnight at 37°C with shaking, you can use the following code:

```python
# Assuming the flask is in slot 1
# Assuming the E.coli culture is in a tube in slot 2

# Define the labware and pipette
flask = containers.load('flask', '1')
tube = containers.load('tube-rack-2ml', '2')
pipette = instruments.P300_Single()

# Transfer 1 mL of E.coli culture to the flask
pipette.transfer(1000, tube['A1'], flask['A1'], new_tip='always')

# Incubate the flask at 37°C with shaking
# Note: The shaking function may vary depending on the specific shaking module used
# Replace 'shaking_module' with the appropriate shaking module name
pipette.delay(minutes=1440)
pipette.shake('shaking_module', flask['A1'])

# Print the commands in the protocol
print(protocol.commands())
```

Please note that this code is a general example and may need modification based on your specific labware and deck configuration. Additionally, the shaking function may vary depending on the specific shaking module used with the Opentrons robot.Gives the name, contact information, and a brief description for the protocol. Also indicates the minimum version of the API that the protocol can run on.
Tells the robot that there is:
A 96-well flat plate in slot 1.
A rack of 300 µL tips in slot 2.
A single-channel 300 µL pipette attached to the left mount, which should pick up tips from the aforementioned rack.
Tells the robot to act by:
Picking up the first tip from the tip rack.
Aspirating 100 µL of liquid from well A1 of the plate.
Dispensing 100 µL of liquid into well B1 of the plate.
Dropping the tip in the trash.
There is much more that the OT-2 robot and the API can do! The Building Block Commands, Complex Commands, and Hardware Modules pages cover many of these functions.
More Resources¶
Opentrons App¶
The Opentrons App is the easiest way to run your Python protocols. The app supports the latest versions of macOS, Windows, and Ubuntu.
Support¶
Questions about setting up your OT-2, using Opentrons software, or troubleshooting? Check out our support articles or get in touch directly with Opentrons Support.
Custom Protocol Service¶
Don’t have the time or resources to write your own protocols? The Opentrons Custom Protocols service can get you set up in as little as a week.
Contributing¶
Opentrons software, including the Python API and this documentation, is open source. If you have an improvement or an interesting idea, you can create an issue on GitHub by following our guidelines.
That guide also includes more information on how to directly contribute code.

---

We thought you’d like to know…
                The documentation you are viewing is for version 1 of the OT-2
                Python Protocol API. This version of the API is no longer supported
                on Opentrons App and Robot Software 4.0.0 and later. Please visit the
                documentation for version 2 of the API
                to access the most up to date information.
            
OT-2 Python API Version 1¶
The Opentrons API is a simple Python framework designed to make writing automated biology lab protocols easy.
We’ve designed it in a way we hope is accessible to anyone with basic Python and wetlab skills. As a bench scientist, you should be able to code your automated protocols in a way that reads like a lab notebook.
Getting Started¶
New to Python? Check out our Using Python In Protocols page first before continuing. To get a sense of the typical structure of our scripts, take a look at our Examples page.
Our API requires Python version 3.7.6 or later. Once this is set up on your computer, you can simply use pip to install the Opentrons package.
pip install opentrons
To simulate protocols on your laptop, check out Simulating Your Scripts. When you’re ready to run your script on a robot, download our latest desktop app
Troubleshooting¶
If you encounter problems using our products please take a look at our support docs or contact our team via intercom on our website at opentrons.com.
Overview¶
How it Looks¶
The design goal of the Opentrons API is to make code readable and easy to understand. For example, below is a short set of instruction to transfer from well 'A1' to well 'B1' that even a computer could understand:
Use the Opentrons API's labware and instruments
This protocol is by me; it’s called Opentrons Protocol Tutorial and is used for demonstrating the Opentrons API
Add a 96 well plate, and place it in slot '2' of the robot deck
Add a 200uL tip rack, and place it in slot '1' of the robot deck
Add a single-channel 300uL pipette to the left mount, and tell it to use that tip rack

---

We thought you'd like to know...
The documentation you are viewing is for the Opentrons OT-1. If you have an Opentrons OT-2, please click here for the OT-2 Python Protocol API documentation.
                
                Opentrons API¶
                The Opentrons API is a simple framework designed to make writing
                automated biology lab protocols easy.
              
                We’ve designed it in a way we hope is accessible to anyone with
                basic computer and wetlab skills. As a bench scientist, you
                should be able to code your automated protocols in a way that
                reads like a lab notebook.
              
View source code on GitHub
                  How it Looks¶
                  The design goal of the Opentrons API is to make code readable
                  and easy to understand. For example, below is a short set of
                  instruction to transfer from well
                  'A1'
                  to well
                  'B1'
                  that even a computer could understand:
                
Use the Opentrons API's containers and instruments
Add a 96 well plate, and place it in slot 'B1'
Add a 200uL tip rack, and place it in slot 'A1'
Add a 200uL pipette to axis 'b', and tell it to use that tip rack
Transfer 100uL from the plate's 'A1' well to it's 'A2' well
                  If we were to rewrite this with the Opentrons API, it would
                  look like the following:
                
# imports
from opentrons import containers, instruments
# containers
plate = containers.load('96-flat', 'B1')
tiprack = containers.load('tiprack-200ul', 'A1')
# pipettes
pipette = instruments.Pipette(axis='b', max_volume=200, tip_racks=[tiprack])
# commands
pipette.transfer(100, plate.wells('A1'), plate.wells('B1'))
                  How it’s Organized¶
                  When writing protocols using the Opentrons API, there are
                  generally three sections:
                
Imports
Containers
Pipettes
Commands
                    Imports¶
                    When writing in Python, you must always include the

---

You are currently viewing the documentation for the Opentrons
                OT-1. To view documentation for the OT-2, click
                here.
              
Search
                Please activate JavaScript to enable the search functionality.
              
              From here you can search these documents. Enter your search words
              into the box below and click "search". Note that the search
              function will automatically search for all of the words. Pages
              containing fewer words won't appear in the result list.

---

You are currently viewing the documentation for the Opentrons
                OT-1. To view documentation for the OT-2, click
                here.
              
                Design with Python¶
                Writing protocols in Python requires some up-front design before
                seeing your liquid handling automation in action. At a
                high-level, writing protocols with the Opentrons API looks like:
              
Write a Python protocol
Test the code for errors
Repeat steps 1 & 2
Calibrate labware on robot
Run your protocol
                These sets of documents aim to help you get the most out of
                steps 1 & 2, the “design” stage.
              
                  Python for Beginners¶
                  If Python is new to you, we suggest going through a few simple
                  tutorials to acquire a base understanding to build upon. The
                  following tutorials are a great starting point for working
                  with the Opentrons API (from
                  learnpython.org):
                
Hello World
Variables and Types
Lists
Basic Operators
Conditions
Loops
Functions
Dictionaries
                  After going through the above tutorials, you should have
                  enough of an understanding of Python to work with the
                  Opentrons API and start designing your experiments!
                
                  Working with Python¶
                  Currently, we recommend writing your protocols in one of two
                  ways:
                
                    Text Editor¶
                    Using a popular and free code editor, like
                    Sublime Text 3, is a common method for writing Python protocols. Download
                    onto your computer, and you can now write and save Python
                    scripts.
                  
Note
                      Make sure that when saving a protocol file, it ends with
                      the
                      .py
                      file extension. This will ensure the App and other
                      programs are able to properly read it.
                    
                      For example,
                      my_protocol_file.py
                    Jupyter Notebook¶
                    For a more interactive environment to write and debug using
                    some of our API tools, we recommend using Jupyter Notebook.
                    To begin, just install
                    Anaconda, which comes with Jupyter Notebook.
                  
                    Once installed, launch Jupyter Notebook, and install the
                    Opentrons API by doing the following:
                  
Create a new Python notebook
                      Run the command
                      !pip

-----

Inoculate a flask of Luria-Bertani (LB) broth with E.coli and grow the cells overnight at 37°C with shaking